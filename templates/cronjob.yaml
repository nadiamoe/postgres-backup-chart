apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "postgres-backup.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "postgres-backup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.schedule }}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
      backoffLimit: 3
      template:
        metadata:
          annotations:
            {{- with .Values.podAnnotations }}
            {{- . | toYaml | nindent 12 }}
            {{- end }}
          labels:
            {{- with .Values.podLabels }}
            {{- . | toYaml | nindent 12 }}
            {{- end }}
        spec:
          restartPolicy: OnFailure
          containers:
            - name: {{ include "postgres-backup.fullname" . }}
              image: {{ .Values.pgImage.repository }}:{{ .Values.pgImage.tag }}
              imagePullPolicy: IfNotPresent
              securityContext:
              {{- .Values.securityContext | toYaml | nindent 16 }}
              command:
                - bash
                - -c
                - |-
                    set -eo pipefail

                    if ! which curl &> /dev/null; then
                      echo "Installing curl"
                      apt update > /dev/null && apt install -y curl ca-certificates > /dev/null
                    fi

                    if ! which mc &> /dev/null; then
                      echo "Installing mc"
                      curl -L --compressed https://dl.min.io/client/mc/release/linux-amd64/mc > /usr/local/bin/mc
                      chmod +x /usr/local/bin/mc
                    fi

                    {{- with .Values.gpg.recvKeys }}
                    echo "Receiving keys from keyserver"
                    {{- range . }}
                    gpg --receive-keys {{ . | quote }} || true
                    {{- end }}
                    {{- end }}

                    {{- with .Values.gpg.keyURLs }}
                    echo "Importing keys from URL"
                    {{- range . }}
                    curl -sSL {{ . | quote }} | gpg --import || true
                    {{- end }}
                    {{- end }}

                    export MC_HOST_backups="${S3_SCHEME}://${S3_KEY_ID}:${S3_KEY_SECRET}@${S3_HOST}"

                    echo "Starting PG dump"
                    pg_dump -d "$PGDATABASE" \
                      | zstd -vc {{ .Values.zstd.args }} \
                    {{- with .Values.gpg.recipients }}
                      | gpg --encrypt --trust-model always {{ range . }}--recipient {{ . | quote }} {{ end }}\
                    {{- end }}
                      | mc pipe -q {{ .Values.mc.args }} \
                        "backups/$S3_BUCKET/{{ include "postgres-backup.fullname" . }}.sql.zstd{{ if .Values.gpg.recipients }}.gpg{{ end }}"
                    echo "PG dump complete"
              resources:
                {{- .Values.resources | toYaml | nindent 16 }}
              env:
              {{- range $key, $value := .Values.env }}
              {{- if $value }}
                - name: {{ $key | quote }}
                  {{- tpl (toYaml $value) $ | nindent 18 }}
              {{- end }}
              {{- end }}
              {{- if .Values.secret }}
              envFrom:
                - secretRef:
                    name: {{ include "postgres-backup.fullname" . }}-inline
              {{- end }}
